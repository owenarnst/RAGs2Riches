# -*- coding: utf-8 -*-
"""upload_metrics_and_ratios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16T8BADllvtEiVjVu_a_WqS8f9K8RQWoP
"""

from sqlalchemy import create_engine, Table, MetaData
from sqlalchemy.orm import sessionmaker
import os
import pandas as pd
from sqlalchemy.dialects.postgresql import insert

# Set up session factory
Session = sessionmaker()


def upload_metrics(engine):
    metrics_path = "./anushka_metrics"
    session = Session(bind=engine)  # Create a session
    metadata = MetaData()  # Create metadata object to access the table

    company_metrics = Table(
        "company_metrics", metadata, autoload_with=engine
    )  # Get the table object

    for filename in os.listdir(metrics_path):
        if ".csv" in filename:
            filepath = os.path.join(metrics_path, filename)
            metrics_df = pd.read_csv(filepath)
            if "Unnamed: 0" in metrics_df.columns:
                metrics_df = metrics_df.drop(columns=["Unnamed: 0"])

            for _, row in metrics_df.iterrows():
                stmt = (
                    insert(company_metrics)
                    .values(
                        CompanyID=row["CompanyID"],
                        Year=row["Year"],
                        Quarter=row["Quarter"],
                        Form_Type=row["Form_Type"],
                        Adjusted_Price_Per_Share=row["Adjusted_Price_Per_Share"],
                        Basic_EPS=row["Basic_EPS"],
                        Total_Common_Shares_Outstanding=row[
                            "Total_Common_Shares_Outstanding"
                        ],
                        Total_Assets=row["Total_Assets"],
                        Total_Liabilities=row["Total_Liabilities"],
                        Dividends=row["Dividends"],
                        Revenue=row["Revenue"],
                        Net_Income=row["Net_Income"],
                        Capital_Expenditure=row["Capital_Expenditure"],
                        Operating_Cash_Flow=row["Operating_Cash_Flow"],
                    )
                    .on_conflict_do_nothing(
                        index_elements=["CompanyID", "Year", "Quarter"]
                    )
                )

                try:
                    session.execute(stmt)
                except Exception as e:
                    print(f"Error inserting row: {e}")

            session.commit()  # Commit the session after all rows are processed
    session.close()  # Close the session after operation


def upload_ratios(engine):
    ratios_path = "./anushka_ratios"
    session = Session(bind=engine)  # Create a session
    metadata = MetaData()  # Create metadata object to access the table

    company_ratios = Table(
        "company_ratios", metadata, autoload_with=engine
    )  # Get the table object

    for filename in os.listdir(ratios_path):
        if ".csv" in filename:
            filepath = os.path.join(ratios_path, filename)
            ratios_df = pd.read_csv(filepath)
            if "Unnamed: 0" in ratios_df.columns:
                ratios_df = ratios_df.drop(columns=["Unnamed: 0"])

            # Insert ratios using on_conflict_do_nothing
            for _, row in ratios_df.iterrows():

                row_dict = {
                    "CompanyID": float(row["CompanyID"]),
                    "Year": int(row["Year"]),
                    "Quarter": int(row["Quarter"]),
                    "Price_To_Earnings_Ratio": round(
                        float(row["Price_To_Earnings_Ratio"]), 2
                    ),
                    "Price_To_Book_Ratio": round(float(row["Price_To_Book_Ratio"]), 2),
                    "Debt_To_Equity_Ratio": round(
                        float(row["Debt_To_Equity_Ratio"]), 2
                    ),
                    "Dividend_Yield": round(float(row["Dividend_Yield"]), 2),
                    "Free_Cash_Flow": round(float(row["Free_Cash_Flow"]), 2),
                }

                stmt = (
                    insert(company_ratios)
                    .values(row_dict)
                    .on_conflict_do_nothing(
                        index_elements=["CompanyID", "Year", "Quarter"]
                    )
                )
                try:
                    session.execute(stmt)
                except Exception as e:
                    print(f"Error inserting ratio: {e}")

            session.commit()  # Commit after inserting all ratios
    session.close()  # Close the session after operation


if __name__ == "__main__":
    DATABASE_URL = "postgresql+psycopg2://u381r20ceebmb7:p2c1b3eb128bb09f92c43d005d55f54c36a4a0e5bd110945652252726dfdb6068@c3gtj1dt5vh48j.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d77oud95l1v4g6"
    engine = create_engine(DATABASE_URL)

    # Bind session factory to engine
    Session.configure(bind=engine)

    upload_metrics(engine)
    upload_ratios(engine)
